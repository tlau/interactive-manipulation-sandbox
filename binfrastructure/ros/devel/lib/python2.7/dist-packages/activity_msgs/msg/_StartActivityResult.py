"""autogenerated by genpy from activity_msgs/StartActivityResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import activity_msgs.msg

class StartActivityResult(genpy.Message):
  _md5sum = "23c7c98855500c7380e4c128ad575c3b"
  _type = "activity_msgs/StartActivityResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# actual id decided on (may be different than the requested
# id, if that one already existed)
uint64 activity_id

ActivityErrorCode error_code


================================================================================
MSG: activity_msgs/ActivityErrorCode
uint8 val

uint8 SUCCESS=0
uint8 OTHER_ERROR=1
"""
  __slots__ = ['activity_id','error_code']
  _slot_types = ['uint64','activity_msgs/ActivityErrorCode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       activity_id,error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StartActivityResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.activity_id is None:
        self.activity_id = 0
      if self.error_code is None:
        self.error_code = activity_msgs.msg.ActivityErrorCode()
    else:
      self.activity_id = 0
      self.error_code = activity_msgs.msg.ActivityErrorCode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_QB.pack(_x.activity_id, _x.error_code.val))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.error_code is None:
        self.error_code = activity_msgs.msg.ActivityErrorCode()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.activity_id, _x.error_code.val,) = _struct_QB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_QB.pack(_x.activity_id, _x.error_code.val))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.error_code is None:
        self.error_code = activity_msgs.msg.ActivityErrorCode()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.activity_id, _x.error_code.val,) = _struct_QB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_QB = struct.Struct("<QB")
