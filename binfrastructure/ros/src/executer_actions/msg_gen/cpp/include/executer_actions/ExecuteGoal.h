/* Auto-generated by genmsg_cpp for file /home/julian/aaad/interactive-manipulation-sandbox/binfrastructure/ros/src/executer_actions/msg/ExecuteGoal.msg */
#ifndef EXECUTER_ACTIONS_MESSAGE_EXECUTEGOAL_H
#define EXECUTER_ACTIONS_MESSAGE_EXECUTEGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace executer_actions
{
template <class ContainerAllocator>
struct ExecuteGoal_ {
  typedef ExecuteGoal_<ContainerAllocator> Type;

  ExecuteGoal_()
  : action()
  {
  }

  ExecuteGoal_(const ContainerAllocator& _alloc)
  : action(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  action;


  typedef boost::shared_ptr< ::executer_actions::ExecuteGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::executer_actions::ExecuteGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ExecuteGoal
typedef  ::executer_actions::ExecuteGoal_<std::allocator<void> > ExecuteGoal;

typedef boost::shared_ptr< ::executer_actions::ExecuteGoal> ExecuteGoalPtr;
typedef boost::shared_ptr< ::executer_actions::ExecuteGoal const> ExecuteGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::executer_actions::ExecuteGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::executer_actions::ExecuteGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace executer_actions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::executer_actions::ExecuteGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::executer_actions::ExecuteGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::executer_actions::ExecuteGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7757aad79fa343e61bc69ed7f1b7666d";
  }

  static const char* value(const  ::executer_actions::ExecuteGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7757aad79fa343e6ULL;
  static const uint64_t static_value2 = 0x1bc69ed7f1b7666dULL;
};

template<class ContainerAllocator>
struct DataType< ::executer_actions::ExecuteGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "executer_actions/ExecuteGoal";
  }

  static const char* value(const  ::executer_actions::ExecuteGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::executer_actions::ExecuteGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# JSON encoded action to execute\n\
string action\n\
\n\
\n\
";
  }

  static const char* value(const  ::executer_actions::ExecuteGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::executer_actions::ExecuteGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.action);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ExecuteGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::executer_actions::ExecuteGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::executer_actions::ExecuteGoal_<ContainerAllocator> & v) 
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EXECUTER_ACTIONS_MESSAGE_EXECUTEGOAL_H

