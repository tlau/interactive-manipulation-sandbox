/* Auto-generated by genmsg_cpp for file /home/julian/aaad/interactive-manipulation-sandbox/binfrastructure/ros/src/executer_actions/msg/ExecuteResult.msg */
#ifndef EXECUTER_ACTIONS_MESSAGE_EXECUTERESULT_H
#define EXECUTER_ACTIONS_MESSAGE_EXECUTERESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace executer_actions
{
template <class ContainerAllocator>
struct ExecuteResult_ {
  typedef ExecuteResult_<ContainerAllocator> Type;

  ExecuteResult_()
  : outcome()
  , outputs()
  , retval(0)
  , error_string()
  {
  }

  ExecuteResult_(const ContainerAllocator& _alloc)
  : outcome(_alloc)
  , outputs(_alloc)
  , retval(0)
  , error_string(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _outcome_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  outcome;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _outputs_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  outputs;

  typedef uint8_t _retval_type;
  uint8_t retval;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_string_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  error_string;

  enum { RETVAL_SUCCESS = 0 };
  enum { RETVAL_PARSE_ERROR = 1 };
  enum { RETVAL_RUNTIME_ERROR = 2 };
  enum { RETVAL_OTHER_ERROR = 3 };

  typedef boost::shared_ptr< ::executer_actions::ExecuteResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::executer_actions::ExecuteResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ExecuteResult
typedef  ::executer_actions::ExecuteResult_<std::allocator<void> > ExecuteResult;

typedef boost::shared_ptr< ::executer_actions::ExecuteResult> ExecuteResultPtr;
typedef boost::shared_ptr< ::executer_actions::ExecuteResult const> ExecuteResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::executer_actions::ExecuteResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::executer_actions::ExecuteResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace executer_actions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::executer_actions::ExecuteResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::executer_actions::ExecuteResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::executer_actions::ExecuteResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c00cb5148e9da7247b9783f7dab67f11";
  }

  static const char* value(const  ::executer_actions::ExecuteResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc00cb5148e9da724ULL;
  static const uint64_t static_value2 = 0x7b9783f7dab67f11ULL;
};

template<class ContainerAllocator>
struct DataType< ::executer_actions::ExecuteResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "executer_actions/ExecuteResult";
  }

  static const char* value(const  ::executer_actions::ExecuteResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::executer_actions::ExecuteResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# outcome of the state machine. if retval is RETVAL_SUCCESS, this will\n\
# correspond to one of the outcomes in the state machine defined in the goal's json_str.\n\
string outcome\n\
\n\
# JSON encoded output values\n\
string outputs\n\
\n\
# return value\n\
uint8 retval\n\
uint8 RETVAL_SUCCESS = 0\n\
uint8 RETVAL_PARSE_ERROR = 1\n\
uint8 RETVAL_RUNTIME_ERROR = 2\n\
uint8 RETVAL_OTHER_ERROR = 3\n\
\n\
# human readable error string, if something went wrong\n\
string error_string\n\
\n\
\n\
";
  }

  static const char* value(const  ::executer_actions::ExecuteResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::executer_actions::ExecuteResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.outcome);
    stream.next(m.outputs);
    stream.next(m.retval);
    stream.next(m.error_string);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ExecuteResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::executer_actions::ExecuteResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::executer_actions::ExecuteResult_<ContainerAllocator> & v) 
  {
    s << indent << "outcome: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.outcome);
    s << indent << "outputs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.outputs);
    s << indent << "retval: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.retval);
    s << indent << "error_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_string);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EXECUTER_ACTIONS_MESSAGE_EXECUTERESULT_H

